#!/usr/bin/env node
'use strict';

const nunjucks = require('nunjucks')
  , path = require('path')
  , fs = require('fs')
  , stylus = require('stylus');


// Destination folder
const dest = process.argv[2] || 'dist/';

// Array of objects containing PNG file name, SVG file name, and ID of symbol.
let symbols = [];

// Get all PNGs
const pngs = fs.readdirSync('dist/png').filter(function (file) { return file.substr(-4) === '.png';});


// Iterate PNGs, create mapping to SVG files
pngs.forEach(function (png) {
  const id = png.substr(0, png.length - 4);

  symbols.push({
    id, png, svg: fs.readFileSync('dist/svg/' + id + '.svg')
  });
});


// Get boilerplate markup and CSS for SVGs.
const cssFileName = 'src/css/index.styl';
const stylusCss = fs.readFileSync(cssFileName).toString();
const symbolDefs = fs.readFileSync('src/html/symbolDefs.html').toString();


// Callback for Stylus that writes HTML with table overview of symbols to disk.
const writeHTML = function (err, symbolsCSS) {
  if (err) throw err;

  // Set up Nunjucks environment.
  const env = new nunjucks.Environment(new nunjucks.FileSystemLoader('bin/templates'),
                                   { autoescape: false });

  // Render template, write to disk.
  env.render('static.nunjs', { symbols, symbolDefs, symbolsCSS }, function (err, html) {
    if (err) throw err;
    fs.writeFileSync(path.join(dest, 'symbols.html'), html);
  });
};


// Convert Stylus CSS to CSS.
stylus.render(stylusCss, { filename: cssFileName }, writeHTML);
